// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPGGame.Domain;

#nullable disable

namespace RPGGame.Migrations
{
    [DbContext(typeof(RPGDbContext))]
    [Migration("20250329200836_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RPGGame.Domain.Entities.Card", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("CardTypeID")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.CardType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Class", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CardName")
                        .IsUnique()
                        .HasFilter("[CardName] IS NOT NULL");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClassID")
                        .IsUnique();

                    b.HasIndex("RaceID")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Card", b =>
                {
                    b.HasOne("RPGGame.Domain.Entities.CardType", "CardType")
                        .WithOne("Card")
                        .HasForeignKey("RPGGame.Domain.Entities.Card", "CardTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("RPGGame.Domain.Entities.Card", "Card")
                        .WithOne("Inventory")
                        .HasForeignKey("RPGGame.Domain.Entities.Inventory", "CardName")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Card");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.User", b =>
                {
                    b.HasOne("RPGGame.Domain.Entities.Class", "Class")
                        .WithOne("User")
                        .HasForeignKey("RPGGame.Domain.Entities.User", "ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RPGGame.Domain.Entities.Race", "Race")
                        .WithOne("User")
                        .HasForeignKey("RPGGame.Domain.Entities.User", "RaceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Card", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.CardType", b =>
                {
                    b.Navigation("Card");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Class", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("RPGGame.Domain.Entities.Race", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
